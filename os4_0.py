import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import shutil
import time
import glob
import base64
import json

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Sistema de Ordens de Servi√ßo",
    page_icon="üîß",
    layout="wide"
)

# Tenta importar o PyGithub com fallback
try:
    from github import Github
    GITHUB_AVAILABLE = True
except ImportError:
    GITHUB_AVAILABLE = False
    st.warning("Funcionalidade do GitHub n√£o dispon√≠vel (PyGithub n√£o instalado)")

# Constantes
LOCAL_FILENAME = "ordens_servico4.0.csv"
BACKUP_DIR = "backups"
MAX_BACKUPS = 10
SENHA_SUPERVISAO = "king@2025"
CONFIG_FILE = "config.json"

# Executantes pr√©-definidos
EXECUTANTES_PREDEFINIDOS = ["Robson", "Guilherme", "Paulinho"]

# Vari√°veis globais para configura√ß√£o do GitHub
GITHUB_REPO = None
GITHUB_FILEPATH = None
GITHUB_TOKEN = None

TIPOS_MANUTENCAO = {
    1: "El√©trica",
    2: "Mec√¢nica",
    3: "Refrigera√ß√£o",
    4: "Hidr√°ulica",
    5: "Civil",
    6: "Instala√ß√£o"
}

STATUS_OPCOES = {
    1: "Pendente",
    2: "Pausado",
    3: "Em execu√ß√£o",
    4: "Conclu√≠do"
}

def carregar_config():
    """Carrega as configura√ß√µes do GitHub do arquivo config.json"""
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE) as f:
                config = json.load(f)
                GITHUB_REPO = config.get('github_repo')
                GITHUB_FILEPATH = config.get('github_filepath')
                GITHUB_TOKEN = config.get('github_token')
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√µes: {str(e)}")

def converter_arquivo_antigo(df):
    """Converte o formato antigo (com 'Executante') para o novo (com 'Executante1' e 'Executante2')"""
    if 'Executante' in df.columns and 'Executante1' not in df.columns:
        df['Executante1'] = df['Executante']
        df['Executante2'] = ""
        df.drop('Executante', axis=1, inplace=True)
    return df

def inicializar_arquivos():
    """Garante que todos os arquivos necess√°rios existam e estejam v√°lidos"""
    os.makedirs(BACKUP_DIR, exist_ok=True)
    carregar_config()
    
    usar_github = GITHUB_AVAILABLE and GITHUB_REPO and GITHUB_FILEPATH and GITHUB_TOKEN
    
    if not os.path.exists(LOCAL_FILENAME) or os.path.getsize(LOCAL_FILENAME) == 0:
        if usar_github:
            baixar_do_github()
        else:
            df = pd.DataFrame(columns=["ID", "Descri√ß√£o", "Data", "Hora Abertura", "Solicitante", "Local", 
                                     "Tipo", "Status", "Data Conclus√£o", "Hora Conclus√£o", "Executante1", "Executante2", "Urgente"])
            df.to_csv(LOCAL_FILENAME, index=False)

def baixar_do_github():
    """Baixa o arquivo do GitHub se estiver mais atualizado"""
    if not GITHUB_AVAILABLE:
        st.error("Funcionalidade do GitHub n√£o est√° dispon√≠vel")
        return False
    
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(GITHUB_REPO)
        contents = repo.get_contents(GITHUB_FILEPATH)
        file_content = contents.decoded_content.decode('utf-8')
        
        with open(LOCAL_FILENAME, 'w', encoding='utf-8') as f:
            f.write(file_content)
        return True
    except Exception as e:
        st.error(f"Erro ao baixar do GitHub: {str(e)}")
        return False

def enviar_para_github():
    """Envia o arquivo local para o GitHub"""
    if not GITHUB_AVAILABLE:
        st.error("Funcionalidade do GitHub n√£o dispon√≠vel")
        return False
    
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_repo(GITHUB_REPO)
        
        with open(LOCAL_FILENAME, 'r', encoding='utf-8') as f:
            content = f.read()
        
        try:
            contents = repo.get_contents(GITHUB_FILEPATH)
            repo.update_file(contents.path, "Atualiza√ß√£o autom√°tica do sistema de OS", content, contents.sha)
        except:
            repo.create_file(GITHUB_FILEPATH, "Cria√ß√£o inicial do arquivo de OS", content)
        return True
    except Exception as e:
        st.error(f"Erro ao enviar para GitHub: {str(e)}")
        return False

def fazer_backup():
    """Cria um backup dos dados atuais"""
    if os.path.exists(LOCAL_FILENAME) and os.path.getsize(LOCAL_FILENAME) > 0:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = os.path.join(BACKUP_DIR, f"ordens_servico_{timestamp}.csv")
        shutil.copy(LOCAL_FILENAME, backup_name)
        limpar_backups_antigos(MAX_BACKUPS)
        return backup_name
    return None

def limpar_backups_antigos(max_backups):
    """Remove backups antigos mantendo apenas os mais recentes"""
    backups = sorted(glob.glob(os.path.join(BACKUP_DIR, "ordens_servico_*.csv")))
    while len(backups) > max_backups:
        try:
            os.remove(backups[0])
            backups.pop(0)
        except:
            continue

def carregar_ultimo_backup():
    """Retorna o caminho do backup mais recente"""
    backups = sorted(glob.glob(os.path.join(BACKUP_DIR, "ordens_servico_*.csv")))
    if backups:
        return backups[-1]
    return None

def carregar_csv():
    """Carrega os dados do CSV local"""
    try:
        if not os.path.exists(LOCAL_FILENAME):
            inicializar_arquivos()
            
        df = pd.read_csv(LOCAL_FILENAME)
        df = converter_arquivo_antigo(df)
        
        colunas_necessarias = ["ID", "Descri√ß√£o", "Data", "Hora Abertura", "Solicitante", "Local", 
                             "Tipo", "Status", "Data Conclus√£o", "Hora Conclus√£o", "Executante1", "Executante2", "Urgente"]
        
        for coluna in colunas_necessarias:
            if coluna not in df.columns:
                df[coluna] = ""
        
        df["Executante1"] = df["Executante1"].astype(str)
        df["Executante2"] = df["Executante2"].astype(str)
        df["Data Conclus√£o"] = df["Data Conclus√£o"].astype(str)
        df["Hora Conclus√£o"] = df["Hora Conclus√£o"].astype(str)
        df["Urgente"] = df["Urgente"].astype(str)
        
        return df
    except Exception as e:
        st.error(f"Erro ao ler arquivo local: {str(e)}")
        backup = carregar_ultimo_backup()
        if backup:
            try:
                df = pd.read_csv(backup)
                df = converter_arquivo_antigo(df)
                df.to_csv(LOCAL_FILENAME, index=False)
                return df
            except Exception as e:
                st.error(f"Erro ao carregar backup: {str(e)}")
        
        return pd.DataFrame(columns=["ID", "Descri√ß√£o", "Data", "Hora Abertura", "Solicitante", "Local", 
                                   "Tipo", "Status", "Data Conclus√£o", "Hora Conclus√£o", "Executante1", "Executante2", "Urgente"])

def salvar_csv(df):
    """Salva o DataFrame no arquivo CSV local e faz backup"""
    try:
        colunas_necessarias = ["ID", "Descri√ß√£o", "Data", "Hora Abertura", "Solicitante", "Local", 
                             "Tipo", "Status", "Data Conclus√£o", "Hora Conclus√£o", "Executante1", "Executante2", "Urgente"]
        
        for coluna in colunas_necessarias:
            if coluna not in df.columns:
                df[coluna] = ""
        
        df["Executante1"] = df["Executante1"].astype(str)
        df["Executante2"] = df["Executante2"].astype(str)
        df["Data Conclus√£o"] = df["Data Conclus√£o"].astype(str)
        df["Hora Conclus√£o"] = df["Hora Conclus√£o"].astype(str)
        df["Urgente"] = df["Urgente"].astype(str)
        
        df.to_csv(LOCAL_FILENAME, index=False, encoding='utf-8')
        fazer_backup()
        
        if GITHUB_AVAILABLE and GITHUB_REPO and GITHUB_FILEPATH and GITHUB_TOKEN:
            enviar_para_github()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar dados: {str(e)}")
        return False

def calcular_lead_time(df):
    """Calcula o lead time m√©dio por tipo de manuten√ß√£o em horas"""
    df_concluidas = df[df["Status"] == "Conclu√≠do"].copy()
    
    if df_concluidas.empty:
        return None
    
    try:
        df_concluidas["Data_Hora_Abertura"] = pd.to_datetime(
            df_concluidas["Data"] + " " + df_concluidas["Hora Abertura"],
            format="%d/%m/%Y %H:%M"
        )
        
        df_concluidas["Data_Hora_Conclusao"] = pd.to_datetime(
            df_concluidas["Data Conclus√£o"] + " " + df_concluidas["Hora Conclus√£o"],
            format="%d/%m/%Y %H:%M"
        )
        
        df_concluidas["Lead_Time_Horas"] = (
            df_concluidas["Data_Hora_Conclusao"] - df_concluidas["Data_Hora_Abertura"]
        ).dt.total_seconds() / 3600
        
        lead_time_medio = df_concluidas.groupby("Tipo")["Lead_Time_Horas"].mean().reset_index()
        lead_time_medio.columns = ["Tipo", "Lead_Time_Medio_Horas"]
        
        return lead_time_medio.round(2)
    except Exception as e:
        st.error(f"Erro ao calcular lead time: {str(e)}")
        return None

def pagina_inicial():
    col1, col2 = st.columns([1, 15])
    with col1:
        st.markdown('<div style="font-size: 2.5em; margin-top: 10px;">üîß</div>', unsafe_allow_html=True)
    with col2:
        st.markdown("<h1 style='font-size: 2.5em;'>SISTEMA DE GEST√ÉO DE ORDENS DE SERVI√áO</h1>", unsafe_allow_html=True)

    st.markdown("<p style='text-align: center; font-size: 1.2em;'>King & Joe</p>", unsafe_allow_html=True)
    st.markdown("---")

    df = carregar_csv()
    if not df.empty:
        novas_os = df[df["Status"] == "Pendente"]
        if not novas_os.empty:
            ultima_os = novas_os.iloc[-1]
            notificacao_key = f"notificacao_vista_{ultima_os['ID']}"
            
            if not st.session_state.get(notificacao_key, False):
                with st.container():
                    if ultima_os.get("Urgente", "") == "Sim":
                        st.error(f"üö® ORDEM DE SERVI√áO URGENTE: ID {ultima_os['ID']} - {ultima_os['Descri√ß√£o']}")
                    else:
                        st.warning(f"‚ö†Ô∏è NOVA ORDEM DE SERVI√áO ABERTA: ID {ultima_os['ID']} - {ultima_os['Descri√ß√£o']}")
                    if st.button("‚úÖ Confirmar recebimento da notifica√ß√£o"):
                        st.session_state[notificacao_key] = True
                        st.experimental_rerun()
                st.markdown("---")

    st.markdown("""
    ### Bem-vindo ao Sistema de Gest√£o de Ordens de Servi√ßo
    **Funcionalidades dispon√≠veis:**
    - üìù **Cadastro** de novas ordens de servi√ßo
    - üìã **Listagem** completa de OS cadastradas
    - üîç **Busca** avan√ßada por diversos crit√©rios
    - üìä **Dashboard** com an√°lises gr√°ficas
    - üîê **Supervis√£o** (√°rea restrita)
    """)

    backups = sorted(glob.glob(os.path.join(BACKUP_DIR, "ordens_servico_*.csv")), reverse=True)
    if backups:
        with st.expander("üìÅ Backups dispon√≠veis"):
            st.write(f"√öltimo backup: {os.path.basename(backups[0])}")
            st.write(f"Total de backups: {len(backups)}")

    if GITHUB_AVAILABLE and GITHUB_REPO:
        st.info("‚úÖ Sincroniza√ß√£o com GitHub ativa")
    elif GITHUB_AVAILABLE:
        st.warning("‚ö†Ô∏è Sincroniza√ß√£o com GitHub n√£o configurada")
    else:
        st.warning("‚ö†Ô∏è Funcionalidade GitHub n√£o dispon√≠vel (PyGithub n√£o instalado)")

def cadastrar_os():
    st.header("üìù Cadastrar Nova Ordem de Servi√ßo")
    with st.form("cadastro_os_form", clear_on_submit=True):
        descricao = st.text_area("Descri√ß√£o da atividade*")
        solicitante = st.text_input("Solicitante*")
        local = st.text_input("Local*")
        urgente = st.checkbox("Urgente")

        submitted = st.form_submit_button("Cadastrar OS")
        if submitted:
            if not descricao or not solicitante or not local:
                st.error("Preencha todos os campos obrigat√≥rios (*)")
            else:
                df = carregar_csv()
                novo_id = int(df["ID"].max()) + 1 if not df.empty and not pd.isna(df["ID"].max()) else 1
                data_hora_utc = datetime.utcnow()
                data_hora_local = data_hora_utc - timedelta(hours=3)
                data_abertura = data_hora_local.strftime("%d/%m/%Y")
                hora_abertura = data_hora_local.strftime("%H:%M")
                
                nova_os = pd.DataFrame([{
                    "ID": novo_id,
                    "Descri√ß√£o": descricao,
                    "Data": data_abertura,
                    "Hora Abertura": hora_abertura,
                    "Solicitante": solicitante,
                    "Local": local,
                    "Tipo": "",
                    "Status": "Pendente",
                    "Data Conclus√£o": "",
                    "Hora Conclus√£o": "",
                    "Executante1": "",
                    "Executante2": "",
                    "Urgente": "Sim" if urgente else "N√£o"
                }])

                df = pd.concat([df, nova_os], ignore_index=True)
                if salvar_csv(df):
                    st.success("Ordem cadastrada com sucesso! Backup autom√°tico realizado.")
                    time.sleep(1)
                    st.rerun()

def listar_os():
    st.header("üìã Listagem Completa de OS")
    df = carregar_csv()

    if df.empty:
        st.warning("Nenhuma ordem de servi√ßo cadastrada ainda.")
    else:
        with st.expander("Filtrar OS"):
            col1, col2 = st.columns(2)
            with col1:
                filtro_status = st.selectbox("Status", ["Todos"] + list(STATUS_OPCOES.values()))
            with col2:
                filtro_tipo = st.selectbox("Tipo de Manuten√ß√£o", ["Todos"] + list(TIPOS_MANUTENCAO.values()))

        if filtro_status != "Todos":
            df = df[df["Status"] == filtro_status]
        if filtro_tipo != "Todos":
            df = df[df["Tipo"] == filtro_tipo]

        st.dataframe(df, use_container_width=True)

def buscar_os():
    st.header("üîç Busca Avan√ßada")
    df = carregar_csv()

    if df.empty:
        st.warning("Nenhuma OS cadastrada para busca.")
        return

    with st.container():
        col1, col2 = st.columns([1, 3])
        with col1:
            criterio = st.radio("Crit√©rio de busca:",
                              ["Status", "ID", "Solicitante", "Local", "Tipo", "Executante1", "Executante2"])
        with col2:
            if criterio == "ID":
                busca = st.number_input("Digite o ID da OS", min_value=1)
                resultado = df[df["ID"] == busca]
            elif criterio == "Status":
                busca = st.selectbox("Selecione o status", list(STATUS_OPCOES.values()))
                resultado = df[df["Status"] == busca]
            elif criterio == "Tipo":
                busca = st.selectbox("Selecione o tipo", list(TIPOS_MANUTENCAO.values()))
                resultado = df[df["Tipo"] == busca]
            else:
                busca = st.text_input(f"Digite o {criterio.lower()}")
                resultado = df[df[criterio].astype(str).str.contains(busca, case=False)]

    if not resultado.empty:
        st.success(f"Encontradas {len(resultado)} OS:")
        st.dataframe(resultado, use_container_width=True)
    else:
        st.warning("Nenhuma OS encontrada com os crit√©rios informados.")

def dashboard():
    st.header("üìä Dashboard Anal√≠tico")
    df = carregar_csv()

    if df.empty:
        st.warning("Nenhuma OS cadastrada para an√°lise.")
        return

    tab1, tab2, tab3, tab4 = st.tabs(["üîß Tipos", "üë• Executantes", "üìà Status", "‚è±Ô∏è Lead Time"])

    with tab1:
        st.subheader("Distribui√ß√£o por Tipo de Manuten√ß√£o")
        tipo_counts = df["Tipo"].value_counts()
        
        if not tipo_counts.empty:
            fig, ax = plt.subplots(figsize=(3, 2))
            
            wedges, _, _ = ax.pie(
                tipo_counts.values,
                labels=None,  # Removido os r√≥tulos
                autopct='%1.1f%%',
                startangle=90,
                wedgeprops=dict(width=0.4),
                textprops={'fontsize': 8, 'color': 'black'}
            )
            
            centre_circle = plt.Circle((0,0), 0.70, fc='white')
            ax.add_artist(centre_circle)
            
            ax.legend(
                wedges,
                tipo_counts.index,
                title="Tipos",
                loc="lower right",
                bbox_to_anchor=(1.5, 0),
                prop={'size': 6},
                title_fontsize='8'
            )
            
            ax.set_title("Distribui√ß√£o por Tipo", fontsize=10)
            st.pyplot(fig, bbox_inches='tight')
        else:
            st.warning("Nenhum dado de tipo dispon√≠vel")

    with tab2:
        st.subheader("OS por Executantes")
        executantes = pd.concat([df["Executante1"], df["Executante2"]])
        executante_counts = executantes[executantes != ""].value_counts()
        
        if not executante_counts.empty:
            fig, ax = plt.subplots(figsize=(3, 2))
            
            wedges, _, _ = ax.pie(
                executante_counts.values,
                labels=None,  # Removido os r√≥tulos
                autopct='%1.1f%%',
                startangle=90,
                wedgeprops=dict(width=0.4),
                textprops={'fontsize': 8, 'color': 'black'}
            )
            
            centre_circle = plt.Circle((0,0), 0.70, fc='white')
            ax.add_artist(centre_circle)
            
            ax.legend(
                wedges,
                executante_counts.index,
                title="Executantes",
                loc="lower right",
                bbox_to_anchor=(1.5, 0),
                prop={'size': 6},
                title_fontsize='8'
            )
            
            ax.set_title("OS por Executantes", fontsize=10)
            st.pyplot(fig, bbox_inches='tight')
        else:
            st.warning("Nenhuma OS atribu√≠da a executantes")

    with tab3:
        st.subheader("Distribui√ß√£o por Status")
        status_counts = df["Status"].value_counts()
        
        if not status_counts.empty:
            fig, ax = plt.subplots(figsize=(3, 2))
            
            wedges, _, _ = ax.pie(
                status_counts.values,
                labels=None,  # Removido os r√≥tulos
                autopct='%1.1f%%',
                startangle=90,
                wedgeprops=dict(width=0.4),
                textprops={'fontsize': 8, 'color': 'black'}
            )
            
            centre_circle = plt.Circle((0,0), 0.70, fc='white')
            ax.add_artist(centre_circle)
            
            ax.legend(
                wedges,
                status_counts.index,
                title="Status",
                loc="lower right",
                bbox_to_anchor=(1.5, 0),
                prop={'size': 6},
                title_fontsize='8'
            )
            
            ax.set_title("Distribui√ß√£o por Status", fontsize=10)
            st.pyplot(fig, bbox_inches='tight')
        else:
            st.warning("Nenhum dado de status dispon√≠vel")

    with tab4:
        st.subheader("Lead Time M√©dio por Tipo (horas)")
        lead_time_df = calcular_lead_time(df)
        
        if lead_time_df is not None and not lead_time_df.empty:
            lead_time_df = lead_time_df.sort_values("Lead_Time_Medio_Horas", ascending=False)
            
            fig, ax = plt.subplots(figsize=(3, 2))
            
            wedges, _, _ = ax.pie(
                lead_time_df["Lead_Time_Medio_Horas"],
                labels=None,  # Removido os r√≥tulos
                autopct=lambda p: f'{p * sum(lead_time_df["Lead_Time_Medio_Horas"])/100:.1f}h',
                startangle=90,
                wedgeprops=dict(width=0.4),
                textprops={'fontsize': 8, 'color': 'black'}
            )
            
            centre_circle = plt.Circle((0,0), 0.70, fc='white')
            ax.add_artist(centre_circle)
            
            ax.legend(
                wedges,
                lead_time_df["Tipo"],
                title="Tipos",
                loc="lower right",
                bbox_to_anchor=(1.5, 0),
                prop={'size': 6},
                title_fontsize='8'
            )
            
            ax.set_title("Lead Time M√©dio (horas)", fontsize=10)
            st.pyplot(fig, bbox_inches='tight')
            
            st.dataframe(lead_time_df.set_index("Tipo"), use_container_width=True)
        else:
            st.warning("Nenhuma OS conclu√≠da dispon√≠vel")

def pagina_supervisao():
    st.header("üîê √Årea de Supervis√£o")
    
    if not st.session_state.get('autenticado', False):
        senha = st.text_input("Digite a senha de supervis√£o:", type="password")
        if senha == SENHA_SUPERVISAO:
            st.session_state.autenticado = True
            st.rerun()
        elif senha:
            st.error("Senha incorreta!")
        return
    
    st.success("Acesso autorizado √† √°rea de supervis√£o")
    
    opcao_supervisao = st.selectbox(
        "Selecione a fun√ß√£o de supervis√£o:",
        [
            "üîÑ Atualizar OS",
            "üíæ Gerenciar Backups",
            "‚öôÔ∏è Configurar GitHub"
        ]
    )
    
    if opcao_supervisao == "üîÑ Atualizar OS":
        atualizar_os()
    elif opcao_supervisao == "üíæ Gerenciar Backups":
        gerenciar_backups()
    elif opcao_supervisao == "‚öôÔ∏è Configurar GitHub":
        configurar_github()

def atualizar_os():
    st.header("üîÑ Atualizar Ordem de Servi√ßo")
    df = carregar_csv()

    nao_concluidas = df[df["Status"] != "Conclu√≠do"]
    if nao_concluidas.empty:
        st.warning("Nenhuma OS pendente")
        return

    os_id = st.selectbox("Selecione a OS", nao_concluidas["ID"])
    os_data = df[df["ID"] == os_id].iloc[0]

    with st.form("atualizar_form"):
        st.write(f"**Descri√ß√£o:** {os_data['Descri√ß√£o']}")
        st.write(f"**Solicitante:** {os_data['Solicitante']}")
        st.write(f"**Local:** {os_data['Local']}")

        col1, col2 = st.columns(2)
        with col1:
            tipo_atual = str(os_data["Tipo"]) if pd.notna(os_data["Tipo"]) else ""
            tipo = st.selectbox(
                "Tipo de Servi√ßo",
                [""] + list(TIPOS_MANUTENCAO.values()),
                index=0 if tipo_atual == "" else list(TIPOS_MANUTENCAO.values()).index(tipo_atual)
            )

            novo_status = st.selectbox(
                "Status*",
                list(STATUS_OPCOES.values()),
                index=list(STATUS_OPCOES.values()).index(os_data["Status"])
            )

            executante1_atual = str(os_data["Executante1"]) if pd.notna(os_data["Executante1"]) else ""
            try:
                index_executante1 = EXECUTANTES_PREDEFINIDOS.index(executante1_atual)
            except ValueError:
                index_executante1 = 0

            executante1 = st.selectbox(
                "Executante Principal*",
                EXECUTANTES_PREDEFINIDOS,
                index=index_executante1
            )

        with col2:
            executante2_atual = str(os_data["Executante2"]) if pd.notna(os_data["Executante2"]) else ""
            try:
                index_executante2 = EXECUTANTES_PREDEFINIDOS.index(executante2_atual) + 1
            except ValueError:
                index_executante2 = 0

            executante2 = st.selectbox(
                "Executante Secund√°rio (opcional)",
                [""] + EXECUTANTES_PREDEFINIDOS,
                index=index_executante2
            )

            if novo_status == "Conclu√≠do":
                data_hora_utc = datetime.utcnow()
                data_hora_local = data_hora_utc - timedelta(hours=3)
                data_atual = data_hora_local.strftime("%d/%m/%Y")
                hora_atual = data_hora_local.strftime("%H:%M")
                
                data_conclusao = data_atual
                hora_conclusao = hora_atual
                
                st.text_input(
                    "Data de conclus√£o",
                    value=data_atual,
                    disabled=True
                )
                st.text_input(
                    "Hora de conclus√£o",
                    value=hora_atual,
                    disabled=True
                )
            else:
                data_conclusao = ""
                hora_conclusao = ""

        submitted = st.form_submit_button("Atualizar OS")

        if submitted:
            if novo_status in ["Em execu√ß√£o", "Conclu√≠do"] and not executante1:
                st.error("Selecione pelo menos um executante principal para este status!")
            else:
                df.loc[df["ID"] == os_id, "Status"] = novo_status
                df.loc[df["ID"] == os_id, "Executante1"] = executante1
                df.loc[df["ID"] == os_id, "Executante2"] = executante2 if executante2 != "" else ""
                df.loc[df["ID"] == os_id, "Tipo"] = tipo
                
                if novo_status == "Conclu√≠do":
                    df.loc[df["ID"] == os_id, "Data Conclus√£o"] = data_conclusao
                    df.loc[df["ID"] == os_id, "Hora Conclus√£o"] = hora_conclusao
                else:
                    df.loc[df["ID"] == os_id, "Data Conclus√£o"] = ""
                    df.loc[df["ID"] == os_id, "Hora Conclus√£o"] = ""
                
                if salvar_csv(df):
                    st.success("OS atualizada com sucesso! Backup autom√°tico realizado.")
                    time.sleep(1)
                    st.rerun()

def gerenciar_backups():
    st.header("üíæ Gerenciamento de Backups")
    backups = sorted(glob.glob(os.path.join(BACKUP_DIR, "ordens_servico_*.csv")), reverse=True)
    
    if not backups:
        st.warning("Nenhum backup dispon√≠vel")
        return
    
    st.write(f"Total de backups: {len(backups)}")
    st.write(f"√öltimo backup: {os.path.basename(backups[0])}")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ Criar Backup Agora"):
            backup_path = fazer_backup()
            if backup_path:
                st.success(f"Backup criado: {os.path.basename(backup_path)}")
                time.sleep(1)
                st.rerun()
            else:
                st.error("Falha ao criar backup")
    
    with col2:
        if st.button("üßπ Limpar Backups Antigos"):
            limpar_backups_antigos(MAX_BACKUPS)
            st.success(f"Mantidos apenas os {MAX_BACKUPS} backups mais recentes")
            time.sleep(1)
            st.rerun()
    
    st.markdown("---")
    st.subheader("Restaurar Backup")
    
    backup_selecionado = st.selectbox(
        "Selecione um backup para restaurar",
        [os.path.basename(b) for b in backups]
    )
    
    if st.button("üîô Restaurar Backup Selecionado"):
        backup_fullpath = os.path.join(BACKUP_DIR, backup_selecionado)
        try:
            shutil.copy(backup_fullpath, LOCAL_FILENAME)
            st.success(f"Dados restaurados do backup: {backup_selecionado}")
            time.sleep(2)
            st.rerun()
        except Exception as e:
            st.error(f"Erro ao restaurar: {str(e)}")

def configurar_github():
    st.header("‚öôÔ∏è Configura√ß√£o do GitHub")
    global GITHUB_REPO, GITHUB_FILEPATH, GITHUB_TOKEN
    
    if not GITHUB_AVAILABLE:
        st.error("""Funcionalidade do GitHub n√£o est√° dispon√≠vel. 
                Para ativar, instale o pacote PyGithub com: 
                `pip install PyGithub`""")
        return
    
    with st.form("github_config_form"):
        repo = st.text_input("Reposit√≥rio GitHub (user/repo)", value=GITHUB_REPO or "vilelarobson0971/OS_4.0")
        filepath = st.text_input("Caminho do arquivo no reposit√≥rio", value=GITHUB_FILEPATH or "ordens_servico4.0.csv")
        token = st.text_input("Token de acesso GitHub", type="password", value=GITHUB_TOKEN or "")
        
        submitted = st.form_submit_button("Salvar Configura√ß√µes")
        
        if submitted:
            if repo and filepath and token:
                try:
                    g = Github(token)
                    g.get_repo(repo).get_contents(filepath)
                    
                    config = {
                        'github_repo': repo,
                        'github_filepath': filepath,
                        'github_token': token
                    }
                    
                    with open(CONFIG_FILE, 'w') as f:
                        json.dump(config, f)
                    
                    GITHUB_REPO = repo
                    GITHUB_FILEPATH = filepath
                    GITHUB_TOKEN = token
                    
                    st.success("Configura√ß√µes salvas e validadas com sucesso!")
                    
                    if baixar_do_github():
                        st.success("Dados sincronizados do GitHub!")
                    else:
                        st.warning("Configura√ß√µes salvas, mas n√£o foi poss√≠vel sincronizar com o GitHub")
                        
                except Exception as e:
                    st.error(f"Credenciais inv√°lidas ou sem permiss√£o: {str(e)}")
            else:
                st.error("Preencha todos os campos para ativar a sincroniza√ß√£o com GitHub")

def main():
    inicializar_arquivos()
    
    st.sidebar.title("Menu")
    opcao = st.sidebar.selectbox(
        "Selecione",
        [
            "üè† P√°gina Inicial",
            "üìù Cadastrar OS",
            "üìã Listar OS",
            "üîç Buscar OS",
            "üìä Dashboard",
            "üîê Supervis√£o"
        ]
    )

    if opcao == "üè† P√°gina Inicial":
        pagina_inicial()
    elif opcao == "üìù Cadastrar OS":
        cadastrar_os()
    elif opcao == "üìã Listar OS":
        listar_os()
    elif opcao == "üîç Buscar OS":
        buscar_os()
    elif opcao == "üìä Dashboard":
        dashboard()
    elif opcao == "üîê Supervis√£o":
        pagina_supervisao()

    st.sidebar.markdown("---")
    st.sidebar.markdown("**Sistema de Ordens de Servi√ßo**")
    st.sidebar.markdown("Vers√£o 4.0 com M√∫ltiplos Executantes")
    st.sidebar.markdown("Desenvolvido por Robson Vilela")

if __name__ == "__main__":
    main()
